package com.github.giwiro.database.dao

import java.sql.{Connection, PreparedStatement, ResultSet}

import com.github.giwiro.model.{Courier, Product}
import com.github.giwiro.utils.DateUtil
import com.mchange.v2.c3p0.C3P0ProxyStatement

class ProductDAO(conn: Connection) {
  def insert(product: Product): Product = {
    val q =
      """|INSERT INTO product (state_id, courier_id, name, url, quantity, with_box, delivery_date, detail, image)
         |VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);
         |""".stripMargin
    val stmt = conn.prepareStatement(q)
    stmt.setInt(1, product.stateId)
    stmt.setInt(2, product.courierId)
    stmt.setString(3, product.name)
    stmt.setString(4, product.url)
    stmt.setInt(5, product.quantity)
    stmt.setInt(6, product.withBox)
    stmt.setDate(7, DateUtil.parseDate(product.deliveryDate))
    stmt.setString(8, product.detail.getOrElse(""))
    stmt.setString(9, product.image)

    val rows: Int = stmt.executeUpdate()
    val generatedKeys = stmt.getGeneratedKeys()
    generatedKeys.next();
    val autoGeneratedID = generatedKeys.getInt(1)
    new Product(
      id = Some(autoGeneratedID),
      stateId = product.stateId,
      state = None,
      courierId = product.courierId,
      name = product.name,
      url = product.url,
      quantity = product.quantity,
      withBox = product.withBox,
      deliveryDate = product.deliveryDate,
      detail = product.detail,
      image = product.image)
  }

  def getAllByCourier(courierId: Int, stateId: Int): List[Product] = {
    // val q = "SELECT * FROM product WHERE product.courier_id = ?;"
    val q_state =
      """|SELECT * FROM product
         |WHERE product.courier_id = ? AND product.state_id = ?
         |ORDER BY product.delivery_date ASC;
         |""".stripMargin
    val stmt = conn.prepareStatement(q_state)
    stmt.setInt(1, courierId)
    stmt.setInt(2, stateId)
    val rs = stmt.executeQuery()
    _mapToProductList(rs)
  }

  def deleteProduct(productId: Int): Unit = {
    val q = "DELETE FROM product WHERE product.id = ?;"
    val stmt = conn.prepareStatement(q)
    stmt.setInt(1, productId)
    stmt.executeUpdate()
  }

  def getBytId(productId: Int): Option[Product] = {
    val q = "SELECT * FROM product WHERE product.id = ?;"
    val stmt = conn.prepareStatement(q)
    stmt.setInt(1, productId)
    val rs = stmt.executeQuery()
    if (!rs.next()) {
      None
    } else {
      Some(_buildProductFromRs(rs))
    }
  }

  def changeState(productId: Int, newStateId: Int): Unit = {
    val q = "UPDATE product SET state_id = ? WHERE id = ?;"
    val stmt = conn.prepareStatement(q)
    stmt.setInt(1, newStateId)
    stmt.setInt(2, productId)
    stmt.executeUpdate()
  }

  private def _mapToProductList(rs: ResultSet): List[Product] = {
    Iterator
      .continually(rs.next)
      .takeWhile(identity)
      .map { _ => _buildProductFromRs(rs) }
      .toList
  }

  private def _buildProductFromRs(rs: ResultSet): Product = {
    new Product(
      id = Some(rs.getInt(1)),
      stateId = rs.getInt(2),
      state = None,
      courierId = rs.getInt(3),
      name = rs.getString(4),
      url = rs.getString(5),
      quantity = rs.getInt(6),
      withBox = rs.getInt(7),
      deliveryDate = DateUtil.serializeDate(rs.getDate(8)),
      detail = Some(rs.getString(9)),
      image = rs.getString(10)
    )
  }
}
